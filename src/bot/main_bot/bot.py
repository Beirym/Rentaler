from ..config import MAIN_BOT_TOKEN
from ..exceptions import exceptions_catcher, NotFound
from ..logs import addLog
from .. import utils
from ..state_machine import *
from ..db import connect, asyncpg_errors
from ..works import getWorkTitle
from ..pagination import paginator
from ..calendar import Calendar, CallbackData, RUSSIAN_LANGUAGE
from ..tg_api.queries import telegram_api_request

import sys
import uuid
import json
import telebot
import asyncio
import datetime
import traceback
from textwrap import dedent
import collections


# Telegram Bot API configuration
bot = telebot.TeleBot(token=MAIN_BOT_TOKEN)
keyboard_obj = telebot.types.InlineKeyboardMarkup
button_obj = telebot.types.InlineKeyboardButton

# Telebot-Calendar configuration
calendar = Calendar(language=RUSSIAN_LANGUAGE)
calendar_callback = CallbackData("calendar", "action", "year", "month", "day", "additional_data")


# Catching all the "/start" in the chat
@bot.message_handler(commands=['start'])
def firstRun(message):
    asyncio.run(addUser(message))

async def addUser(message: telebot.types.Message) -> None:
    '''Retrieves the user_id from the message and tries to add it to the database.
    If the attempt ends with an error, it returns the bot start menu.'''

    user_id = message.from_user.id
    now = datetime.datetime.now

    conn = await connect()
    try:
        stmt = '''
            INSERT INTO users (id, "regDate")
            VALUES ($1, $2)
        '''
        await conn.execute(stmt, user_id, now())
    except asyncpg_errors['UniqueViolationError']:
        pass
    finally:
        await conn.close()
        await start(message)


# Getter of any text messenges in the chat
@bot.message_handler(content_types='text')
def main(message):
    asyncio.run(start(message))

@exceptions_catcher()
@autoSetState()
async def start(message: telebot.types.Message=None, user_id: int=None) -> None:
    "Outputs the start menu."

    if user_id is None:
        user_id = message.from_user.id

    greeting = await utils.greeting()
    name = await utils.getUsername(bot, user_id)

    keyboard = keyboard_obj()
    keyboard.add(button_obj(text='üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', callback_data='start_func-toolsMenu'))
    keyboard.add(button_obj(text='üè† –ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã', callback_data='start_func-propertiesMenu'))
    keyboard.add(button_obj(text='üßëüèº‚Äçüîß –ú–æ–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', callback_data=f'start_func-workersMenu'))

    bot.send_message(
        chat_id=user_id,
        text=dedent(
            f'''*{greeting}, {name}!*'''
        ),
        parse_mode="Markdown",
        reply_markup=keyboard,
    )


# === Tools ===

@exceptions_catcher()
@autoSetState()
async def toolsMenu(user_id: int) -> None:
    keyboard = keyboard_obj()
    keyboard.add(button_obj(text='üß¥ –ö–ª–∏–Ω–∏–Ω–≥', callback_data='start_func-cleaningMenu'))
    keyboard.add(button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back'))

    bot.send_message(
        chat_id=user_id,
        text=dedent(
            f'''
            *üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*

            *üß¥ –ö–ª–∏–Ω–∏–Ω–≥* - —É—á—ë—Ç –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±–æ—Ä–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç–∞—Ö.
            '''
        ),
        parse_mode="Markdown",
        reply_markup=keyboard,
    )

@exceptions_catcher()
@autoSetState()
async def cleaningMenu(user_id: int) -> None:
    keyboard = keyboard_obj()
    keyboard.add(button_obj(text='‚ûï –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–±–æ—Ä–∫—É', callback_data='start_func-addCleaning'))
    keyboard.add(button_obj(text='üóÇ –°–ø–∏—Å–æ–∫ —É–±–æ—Ä–æ–∫', callback_data='start_func-cleaningList'))
    keyboard.add(button_obj(text='üóÉ –ê—Ä—Ö–∏–≤ —É–±–æ—Ä–æ–∫', callback_data='start_func-cleaningList-only_completed=True'))
    keyboard.add(button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back'))

    conn = await connect()
    try:
        query = '''
            SELECT
                COUNT(id) FILTER (WHERE "acceptForWorkDate" IS NULL) AS scheduled,
                COUNT(id) FILTER (WHERE "acceptanceConfirmed" = TRUE AND "completedDate" IS NULL) AS confirmed,
                COUNT(id) FILTER (WHERE "completedDate" IS NOT NULL) AS completed
            FROM
                "userWorks"
            WHERE
                "userID" = $1
                AND "workID" = $2;
        '''
        cleaning_numbers = dict((await conn.fetchrow(query, user_id, work_id := 1)))
    finally:
        await conn.close()

    scheduled_cleaning = cleaning_numbers['scheduled']
    confirmed_cleaning = cleaning_numbers['confirmed']
    completed_cleaning = cleaning_numbers['completed']

    bot.send_message(
        chat_id=user_id,
        text=dedent(
            f'''
            *üß¥ –ö–ª–∏–Ω–∏–Ω–≥*

            üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–±–æ—Ä–æ–∫: *{scheduled_cleaning}*
            ‚òëÔ∏è –ü–æ–¥—Ç–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —É–±–æ—Ä–æ–∫: *{confirmed_cleaning}*
            ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É–±–æ—Ä–æ–∫: *{completed_cleaning}*
            '''
        ),
        parse_mode="Markdown",
        reply_markup=keyboard,
    )

@exceptions_catcher()
async def addCleaning(user_id: int, redis_data_key: str=None, confirmed: bool=False) -> None:
    if redis_data_key:
        redis = (await getRedisConnection())
        cleaning_data = json.loads(redis.get(redis_data_key))
    else:
        cleaning_data = {
            'cleaners': None,
            'property_id': None,
            'date': None,
            'time_range': None,
            'hygiene_kits_count': None,
            'comment': None,
        }
        redis_data_key = str(uuid.uuid4())[:8]
        redis = (await getRedisConnection())
        redis.set(redis_data_key, json.dumps(cleaning_data), ex=60*10)

    back_button = button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back')

    if cleaning_data['cleaners'] is None:
        conn = await connect()
        try:
            query = '''
                SELECT "workerID"
                FROM "userWorkers"
                WHERE "userID" = $1
                    AND "workID" = $2
            '''
            cleaners = [c[0] for c in (await conn.fetch(query, user_id, 1))]
        finally:
            await conn.close()

        cleaners_count = len(cleaners)

        if cleaners_count == 0:
            # Remove cleaning data from redis
            redis.delete(redis_data_key)

            keyboard = keyboard_obj()
            keyboard.add(button_obj(text='‚ûïüßëüèº‚Äçüîß –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', callback_data='start_func-addWorker'))
            keyboard.add(button_obj(text='üß¥ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='start_func-cleaningMenu'))
            keyboard.add(back_button)

            bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *‚ùå –£ –í–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞-–∫–ª–∏–Ω–µ—Ä–∞!*

                    –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–Ω–∏–Ω–≥, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
                    '''
                ),
                parse_mode="Markdown",
                reply_markup=keyboard,
            )
        else:
            cleaning_data['cleaners'] = cleaners
            redis.set(redis_data_key, json.dumps(cleaning_data), ex=60*10)
            await addCleaning(user_id, redis_data_key)

    elif cleaning_data['property_id'] is None:
        conn = await connect()    
        try:
            query = '''
                SELECT id, address, title
                FROM properties
                WHERE "userID" = $1
            '''
            properties = (await conn.fetch(query, user_id))
        finally:
            await conn.close()

        keyboard = keyboard_obj()
        if len(properties) == 0:
            # Remove cleaning data from redis
            redis.delete(redis_data_key)

            keyboard.add(button_obj(text='‚ûïüè† –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç', callback_data='start_func-addProperty'))
            keyboard.add(button_obj(text='üß¥ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='start_func-cleaningMenu'))
            keyboard.add(back_button)

            return bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *‚ùå –£ –í–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞!*

                    –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–Ω–∏–Ω–≥, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞.
                    '''
                ),
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        else:
            for p in properties:
                address = p[1]; title = p[2]
                keyboard.add(
                    button_obj(
                        text=f'{title[:20] if title else address[:20]}', 
                        callback_data=f'set_redis_data-{redis_data_key}-property_id={p[0]}-start_func=addCleaning'
                    )
                )
            keyboard.add(back_button)

            return bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *‚ûï –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–Ω–∏–Ω–≥–∞*

                    üè† –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–Ω–∏–Ω–≥.
                    '''
                ),
                parse_mode="Markdown",
                reply_markup=keyboard,
            )

    elif cleaning_data['date'] is None:
        now = datetime.datetime.now()

        return bot.send_message(
            chat_id=user_id,
            text=dedent(
                f'''
                *‚ûï –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–Ω–∏–Ω–≥–∞*

                üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–Ω–∏–Ω–≥.
                ''',
            ),
            parse_mode="Markdown",
            reply_markup=calendar.create_calendar(
                name=calendar_callback.prefix,
                year=now.year,
                month=now.month,
                start_func='addCleaning',
                redis_data_key=f"{redis_data_key}",
            )
        )
    
    elif datetime.datetime.strptime(cleaning_data['date'], '%Y-%m-%d').date() < datetime.datetime.now().date():
        cleaning_data['date'] = None
        redis.set(redis_data_key, json.dumps(cleaning_data), ex=60*10)
        
        bot.send_message(
            chat_id=user_id,
            text=dedent(
                f"*‚ùå –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π!*"
            ),
            parse_mode="Markdown",
        )
        await addCleaning(user_id, redis_data_key)

    elif cleaning_data['time_range'] is None:
        keyboard = keyboard_obj()
        keyboard.add(back_button)
        
        message = bot.send_message(
            chat_id=user_id,
            text=dedent(
                f'''
                *‚ûï –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–Ω–∏–Ω–≥–∞*

                ‚è∞ –£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏, –≤ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–æ–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–∞.
                '''
            ),
            parse_mode="Markdown",
            reply_markup=keyboard,
        )

        def nextStepHandler(message):
            asyncio.run(setTimeRange(message))
        bot.register_next_step_handler(message, nextStepHandler)

        async def setTimeRange(message):
            if len(message.text) > 30:
                return bot.send_message(
                    chat_id=user_id,
                    text=dedent(
                        f'''
                        *‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ!*

                        –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –±–æ–ª–µ–µ —á–µ–º –∏–∑ 30 —Å–∏–º–≤–æ–ª–æ–≤.
                        '''
                    ),
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )

            redis = (await getRedisConnection())
            values_dict = json.loads(redis.get(redis_data_key))
            values_dict['time_range'] = message.text
            redis.set(redis_data_key, json.dumps(values_dict), ex=60*10)
            
            await addCleaning(user_id, redis_data_key)

    elif cleaning_data['hygiene_kits_count'] is None:
            keyboard = keyboard_obj()
            keyboard.add(back_button)
            
            message = bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *‚ûï –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–Ω–∏–Ω–≥–∞*

                    üß∫ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–ª—è –∑–∞—Å–µ–ª–µ–Ω–∏—è.
                    '''
                ),
                parse_mode="Markdown",
                reply_markup=keyboard,
            )

            def nextStepHandler(message):
                asyncio.run(setHygieneKitsCount(message))
            bot.register_next_step_handler(message, nextStepHandler)

            async def setHygieneKitsCount(message):
                if len(message.text) > 2:
                    return bot.send_message(
                        chat_id=user_id,
                        text=dedent(
                            f'''
                            *‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ!*

                            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∏–≥–µ–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –±–æ–ª–µ–µ —á–µ–º –∏–∑ 2 —Å–∏–º–≤–æ–ª–æ–≤.
                            '''
                        ),
                        parse_mode="Markdown",
                        reply_markup=keyboard,
                    )

                redis = (await getRedisConnection())
                values_dict = json.loads(redis.get(redis_data_key))
                values_dict['hygiene_kits_count'] = message.text
                redis.set(redis_data_key, json.dumps(values_dict), ex=60*10)
                
                return await addCleaning(user_id, redis_data_key)

    else:
        if confirmed is False:
            keyboard = keyboard_obj()
            keyboard.row(
                button_obj(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='start_func-cleaningMenu'),
                button_obj(
                    text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 
                    callback_data=f'start_func-addCleaning-redis_data_key="{redis_data_key}"&confirmed=True'
                )
            )

            conn = (await connect())
            try:
                query = "SELECT address FROM properties WHERE id = $1"
                property_address = (await conn.fetchval(query, int(cleaning_data['property_id'])))
            finally:
                await conn.close()

            comment = cleaning_data['comment']

            message = bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *‚ûï –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–Ω–∏–Ω–≥–∞*

                    üè† –û–±—ä–µ–∫—Ç: *{property_address}*
                    üìÖ –î–∞—Ç–∞: *{cleaning_data['date']}*
                    ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: *{cleaning_data['time_range']}*
                    üß∫ –ö–æ–ª-–≤–æ –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤: *{cleaning_data['hygiene_kits_count']}*

                    *üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment if comment else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
                    {
                        '_(–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –≤–≤–µ–¥–∏—Ç–µ - "-".)_' if comment
                        else '_(–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç.)_'
                    }

                    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–Ω–∏–Ω–≥–µ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
                    –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É - "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
                    ''',
                ),
                parse_mode="Markdown",
                reply_markup=keyboard,
            )

            def nextStepHandler(message):
                asyncio.run(setCommentText(message))
            bot.register_next_step_handler(message, nextStepHandler)

            async def setCommentText(message):
                if len(message.text) > 200:
                    bot.send_message(
                        chat_id=user_id,
                        text=dedent(
                            f'''
                            *‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!*

                            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è - *200 —Å–∏–º–≤–æ–ª–æ–≤*
                            '''
                        ),
                        parse_mode="Markdown",
                        reply_markup=keyboard,
                    )
                else:
                    if message.text == '-':
                        comment = None
                    else:
                        comment = message.text

                    cleaning_data['comment'] = comment
                    redis.set(redis_data_key, json.dumps(cleaning_data), ex=60*10)

                await addCleaning(user_id, redis_data_key)
                        
        else:
            # Clear available next step handlers
            bot.clear_step_handler_by_chat_id(chat_id=user_id)

            property_id = int(cleaning_data['property_id'])
            work_id = 1
            date = datetime.datetime.strptime(cleaning_data['date'], '%Y-%m-%d').date()
            time_range = cleaning_data['time_range']
            comment = cleaning_data['comment']
            hygiene_kits_count = int(cleaning_data['hygiene_kits_count'])
            now = datetime.datetime.now
            if date == now().date(): cleaning_date = '–°–µ–≥–æ–¥–Ω—è'
            elif date == (now() + datetime.timedelta(days=1)).date(): cleaning_date = '–ó–∞–≤—Ç—Ä–∞'
            else: cleaning_date = date

            conn = await connect()
            try:
                stmt_user_works = '''
                    INSERT INTO "userWorks" 
                    ("userID", "propertyID", "workID", "date", "timeRange", "comment", "addDate")
                    VALUES ($1, $2, $3, $4, $5, $6, $7)
                    RETURNING id
                '''

                user_work_id = (
                    await conn.fetchval(
                        stmt_user_works,
                        user_id,
                        property_id,
                        work_id,
                        date,
                        time_range,
                        comment,
                        now(),
                    )
                )

                stmt_cleaning = '''
                    INSERT INTO cleaning ("workID", "hygieneKitsCount")
                    VALUES ($1, $2)
                '''
                await conn.execute(stmt_cleaning, user_work_id, hygiene_kits_count)

                query = "SELECT address FROM properties WHERE id = $1"
                property_address = (await conn.fetchval(query, property_id))
            finally:
                await conn.close()

            # Remove cleaning data from redis
            redis.delete(redis_data_key)

            keyboard = keyboard_obj()
            keyboard.add(
                button_obj(
                    text='üß¥ –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–Ω–∏–Ω–≥–∞', 
                    callback_data=f'start_func-cleaningCard-work_id={user_work_id}-call_id=True'
                )
            )

            bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *‚è∞ –ö–ª–∏–Ω–∏–Ω–≥ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!*

                    *{cleaning_date} ({time_range})* –Ω–∞ –∞–¥—Ä–µ—Å: *{property_address}*

                    *üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment if comment else '–Ω–µ —É–∫–∞–∑–∞–Ω'}

                    _–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.
                    –ü—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ._
                    '''
                ),
                parse_mode="Markdown",
                reply_markup=keyboard,
            )

            # Sending notifications to cleaners
            for cleaner_id in cleaning_data['cleaners']:
                await telegram_api_request(
                    request_method='POST',
                    api_method='sendMessage',
                    parameters={
                        'chat_id': cleaner_id,
                        'text': dedent(
                            f'''
                            *‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫–ª–∏–Ω–∏–Ω–≥!*

                            *{cleaning_date} ({time_range})* –Ω–∞ –∞–¥—Ä–µ—Å: *{property_address}*

                            {f'*üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}' if comment else ''}
                            '''
                        ),
                        'parse_mode': 'Markdown',
                        'reply_markup': json.dumps({
                            "inline_keyboard": [
                                [
                                    {
                                        'text': '‚òëÔ∏è –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É',
                                        'callback_data': f'start_func-acceptCleaning-work_id={user_work_id}-call_id=True',
                                    },
                                ],
                            ],
                        }),
                    },
                    bot='work'
                )

@exceptions_catcher()
@autoSetState()
async def cleaningList(user_id: int, page: int=1, only_completed: bool=False) -> None:
    conn = await connect()
    try:
        query = f'''
            SELECT id, date, "timeRange", "acceptanceConfirmed"
            FROM "userWorks"
            WHERE "userID" = $1
                AND "workID" = $2
                AND "completedDate" {'IS NOT NULL' if only_completed else 'IS NULL'}
        '''
        cleaning = (await conn.fetch(query, user_id, work_id := 1))
    finally:
        await conn.close()

    cleaning_count = len(cleaning)
    is_confirmed = {
        False: 'üìÖ',
        True: '‚òëÔ∏è',
    }

    if cleaning_count > 0:
        cleaning_data = tuple([
            {
                # Cleaning text indexes: 1 - date, 2 - time_range, 3 - acceptanceConfirmed
                'text': f'‚úÖ {c[1]} ({c[2]})' if only_completed else f'{is_confirmed[c[3]]} {c[1]} ({c[2]})',
                'callback_data': f'start_func-cleaningCard-work_id={c[0]}-call_id=True'
            } 
            for c in cleaning
        ])
        keyboard = (await paginator(array=cleaning_data, current_page=page, only_completed=only_completed))
    else:
        keyboard = keyboard_obj()
    keyboard.add(button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back'))
    
    bot.send_message(
        chat_id=user_id,
        text=dedent((
            f'''
            {'*üóÉ –ê—Ä—Ö–∏–≤ —É–±–æ—Ä–æ–∫*' if only_completed else '*üóÇ –°–ø–∏—Å–æ–∫ —É–±–æ—Ä–æ–∫*'}

            üß¥ –£ –í–∞—Å *{cleaning_count}* –∑–∞–ø–∏—Å–µ–π –æ–± —É–±–æ—Ä–∫–∞—Ö.

            üìÖ - –∫–ª–∏–Ω–∏–Ω–≥ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω
            ‚òëÔ∏è - –∫–ª–∏–Ω–∏–Ω–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
            ‚úÖ - –∫–ª–∏–Ω–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω
            '''
        )),
        parse_mode="Markdown",
        reply_markup=keyboard,
    )     

@exceptions_catcher()
@autoSetState()
async def cleaningCard(user_id: int, work_id: int, call_id: int=None) -> None:
    conn = await connect()
    try:
        query = '''
            SELECT 
                w.id, 
                w."propertyID", p."address",
                w."workerID", uw."workerName",
                w.date, w."timeRange", 
                w."acceptForWorkDate", w."acceptanceConfirmed", w."completedDate",
                w.comment, 
                w."addDate", 
                c."hygieneKitsCount"
            FROM "userWorks" w
            JOIN cleaning c
                ON c."workID" = w.id
            JOIN properties p
                ON p.id = w."propertyID"
            LEFT JOIN "userWorkers" uw
                ON uw."workerID" = w."workerID"
            WHERE w.id = $1
        '''
        cleaning_data = (await conn.fetchrow(query, work_id))
    finally:
        await conn.close()

    if cleaning_data:
        cleaning_data = dict(cleaning_data)
    else:
        return bot.answer_callback_query(
            callback_query_id=call_id, 
            text=dedent(
            '''
            üîé –ó–∞–ø–∏—Å—å –æ –∫–ª–∏–Ω–∏–Ω–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!

            –ú–µ–Ω—é –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–ª–∏–Ω–∏–Ω–≥–∞ —É—Å—Ç–∞—Ä–µ–ª–æ.
            '''), 
            show_alert=True
        )


    keyboard = keyboard_obj()
    if cleaning_data['acceptanceConfirmed'] is False:
        keyboard.add(button_obj(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–ª–∏–Ω–∏–Ω–≥', callback_data=f'start_func-removeCleaning-work_id={work_id}'))
    elif cleaning_data['completedDate']:
        keyboard.add(
            button_obj(
                text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –∫–ª–∏–Ω–∏–Ω–≥–µ', 
                callback_data=f'start_func-removeCleaning-work_id={work_id}'
            )
        )
    if cleaning_data['workerID']:
        keyboard.add(
            button_obj(
                text='üßëüèº‚Äçüîß –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', 
                callback_data=f'start_func-workerCard-worker_id={cleaning_data["workerID"]}-call_id=True'
            )
        )
    keyboard.add(button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back'))

    address = cleaning_data['address']

    now_date = datetime.datetime.now().date()
    date = cleaning_data['date']
    if date == now_date: date = '–°–µ–≥–æ–¥–Ω—è'
    elif date == (now_date + datetime.timedelta(days=1)): date = '–ó–∞–≤—Ç—Ä–∞'

    time_range = cleaning_data['timeRange']
    worker_name = cleaning_data['workerName']
    acceptanceConfirmed = cleaning_data['acceptanceConfirmed']

    bot.send_message(
        chat_id=user_id,
        text=dedent(
            f'''
            *üß¥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–Ω–∏–Ω–≥–µ*

            üè† –ê–¥—Ä–µ—Å: *{address}*
            üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: *{date} ({time_range})*
            üßëüèº‚Äçüîß –°–æ—Ç—Ä—É–¥–Ω–∏–∫: *{worker_name if worker_name else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}*
            {'‚úÖ' if acceptanceConfirmed else '‚ùå'} –ö–ª–∏–Ω–∏–Ω–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: *{'–¥–∞' if acceptanceConfirmed else '–Ω–µ—Ç'}*
            '''
        ),
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@exceptions_catcher()
async def removeCleaning(user_id: int, work_id: int, call_id: int=None, confirmed: bool=False) -> None:
    conn = await connect()
    try:
        query = '''
            SELECT id
            FROM "userWorks"
            WHERE id = $1 AND "userID" = $2
        '''
        cleaning_data = (await conn.fetchrow(query, work_id, user_id))
    finally:
        await conn.close()

    if cleaning_data is None:
        bot.answer_callback_query(
            call_id, 
            dedent(
            '''
            üîé –ó–∞–ø–∏—Å—å –æ –∫–ª–∏–Ω–∏–Ω–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!

            –ú–µ–Ω—é –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –ø—ã—Ç–∞–ª–∏—Å—å –µ—ë —É–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–ª–æ.
            '''), 
            show_alert=True
        )

    else:
        keyboard = keyboard_obj()

        if confirmed:
            conn = await connect()
            try:
                stmt = 'DELETE FROM "userWorks" WHERE id = $1'
                await conn.execute(stmt, work_id)
            finally:
                await conn.close()

            keyboard.add(button_obj(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start_func-start'))

            bot.send_message(
                chat_id=user_id,
                text="*‚úÖ –ó–∞–ø–∏—Å—å –æ –∫–ª–∏–Ω–∏–Ω–≥–µ —É–¥–∞–ª—ë–Ω–∞!*",
                parse_mode="Markdown",
                reply_markup=keyboard,
            )     

        else:
            keyboard.row(
                button_obj(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='start_func-back'),
                button_obj(
                    text='‚úÖ –£–¥–∞–ª–∏—Ç—å', 
                    callback_data=f'start_func-removeCleaning-work_id={work_id}&confirmed=True'
                )
            )

            bot.send_message(
                chat_id=user_id,
                text=f"*üóë –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –∫–ª–∏–Ω–∏–Ω–≥–µ?*",
                parse_mode="Markdown",
                reply_markup=keyboard,
            )

# /. === Tools ===


# === Properties ===

@exceptions_catcher()
@autoSetState()
async def propertiesMenu(user_id: int) -> None:
    keyboard = keyboard_obj()
    keyboard.add(button_obj(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç', callback_data='start_func-addProperty'))
    keyboard.add(button_obj(text='üóÇ –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤', callback_data='start_func-propertiesList'))
    keyboard.add(button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back'))

    conn = await connect()
    try:
        properties_query = '''SELECT COUNT(id) FROM properties WHERE "userID" = $1'''

        properties = (await conn.fetchrow(properties_query, user_id))[0]
    finally:
        await conn.close()

    bot.send_message(
        chat_id=user_id,
        text=dedent(
            f'''
            *üè† –ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã* 

            üèò –£ –í–∞—Å *{properties}* –æ–±—ä–µ–∫—Ç–æ–≤.
            '''
        ),
        parse_mode="Markdown",
        reply_markup=keyboard,
    )

@exceptions_catcher()
@autoSetState()
async def addProperty(user_id: int, property_data: dict=None) -> None:
    keyboard = keyboard_obj()
    back_button = button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back')

    if property_data:
        address = property_data['address']
        title = property_data['title']

        if len(address) > 100 or (title and len(title) > 30):
            keyboard.add(back_button)
            bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *‚ùå –ê–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!*

                    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∞–¥—Ä–µ—Å–∞ - *100* —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–∑–≤–∞–Ω–∏—è - *30*.
                    '''
                ),
                parse_mode="Markdown",
                reply_markup=keyboard,
            )
            return

        now = datetime.datetime.now
        conn = await connect()
        try:
            stmt = '''
                INSERT INTO properties ("userID", address, title, "addDate")
                VALUES ($1, $2, $3, $4)
                RETURNING id
            '''
            property_id = (await conn.fetchval(stmt, user_id, address, title, now()))
        finally:
            await conn.close()

        keyboard.add(
            button_obj(
                text='üè° –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±—ä–µ–∫—Ç–∞', 
                callback_data=f'start_func-propertyCard-property_id={property_id}-call_id=True'
            )
        )
        keyboard.add(back_button)

        bot.send_message(
            chat_id=user_id,
            text=dedent(
                f'''
                *‚úÖ –û–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!*

                üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: *{title if title else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}*
                ü™ß  –ê–¥—Ä–µ—Å: *{address}*
                '''
            ),
            parse_mode="Markdown",
            reply_markup=keyboard,
        )

    else:
        keyboard.add(back_button)

        message = bot.send_message(
            chat_id=user_id,
            text=dedent(
                f'''
                *‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞*

                ü™ß –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞.

                _–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –æ–±—ä–µ–∫—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ, —É–∫–∞–∑–∞–≤ –µ–≥–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –æ—Ç –∞–¥—Ä–µ—Å–∞. 
                (–ü—Ä–∏–º–µ—Ä: –≥. –ú–æ—Å–∫–≤–∞, –ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±., 12; –ë–∞—à–Ω—è –§–µ–¥–µ—Ä–∞—Ü–∏—è)._
                '''
            ),
            parse_mode="Markdown",
            reply_markup=keyboard,
        )

        def nextStepHandler(message):
            data = message.text.split(';')
            property_data = {
                'address': data[0],
                'title': data[1] if len(data) > 1 else None,
            }
            asyncio.run(addProperty(user_id, property_data))
        bot.register_next_step_handler(message, nextStepHandler)

@exceptions_catcher()
@autoSetState()
async def propertiesList(user_id: int, page: int=1) -> None:
    conn = await connect()
    try:
        query = '''
            SELECT id, address, title
            FROM properties
            WHERE "userID" = $1
        '''
        properties = (await conn.fetch(query, user_id))
    finally:
        await conn.close()

    properties_count = len(properties)
    if properties_count > 0:
        properties_data = tuple([
            {
                'text': f'{p[2][:20] if p[2] else p[1][:20]}', # p[1] == "address", p[2] == "title"
                'callback_data': f'start_func-propertyCard-property_id={p[0]}-call_id=True'
            } 
            for p in properties
        ])
        keyboard = (await paginator(array=properties_data, current_page=page))
    else:
        keyboard = keyboard_obj()
    keyboard.add(button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back'))
    
    bot.send_message(
        chat_id=user_id,
        text=dedent(
            f'''
            *üóÇ –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤*

            üè° –£ –í–∞—Å *{len(properties)}* –æ–±—ä–µ–∫—Ç–æ–≤.
            '''
        ),
        parse_mode="Markdown",
        reply_markup=keyboard,
    )     

@exceptions_catcher()
@autoSetState()
async def propertyCard(user_id: int, property_id: int, call_id: int) -> None:
    conn = await connect()
    try:
        query = '''
            SELECT address, title, "addDate"
            FROM properties
            WHERE id = $1 
                AND "userID" = $2 
        '''
        property_data = (await conn.fetchrow(query, property_id, user_id))
    finally:
        await conn.close()

    if property_data is None:
        bot.answer_callback_query(
            callback_query_id=call_id, 
            text=dedent(
            '''
            üîé –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!

            –ú–µ–Ω—é –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫—É —É—Å—Ç–∞—Ä–µ–ª–æ.
            '''), 
            show_alert=True
        )
    else:
        address = property_data[0]
        title = property_data[1]
        add_date = property_data[2].date()

        keyboard = keyboard_obj()
        keyboard.add(
            button_obj(
                text='üóë –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç', 
                callback_data=f'start_func-removeProperty-property_id={property_id}-call_id=True'
            )
        )
        keyboard.add(button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back'))

        bot.send_message(
            chat_id=user_id,
            text=dedent(
                f'''
                *üè† {title if title else address}*
                {f'ü™ß –ê–¥—Ä–µ—Å: *{address}*' if title else ''}
                üìÖ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: *{add_date}*
                '''
            ),
            parse_mode="Markdown",
            reply_markup=keyboard,
        )

@exceptions_catcher()
async def removeProperty(user_id: int, property_id: int, call_id: int=None, confirmed: bool=False) -> None:
    conn = await connect()
    try:
        query = '''
            SELECT address
            FROM properties
            WHERE id = $1 AND "userID" = $2
        '''
        property_data = (await conn.fetchrow(query, property_id, user_id))
    finally:
        await conn.close()

    if property_data is None:
        bot.answer_callback_query(
            call_id, 
            dedent(
            '''
            üîé –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!

            –ú–µ–Ω—é –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –ø—ã—Ç–∞–ª–∏—Å—å –µ–≥–æ —É–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–ª–æ.
            '''), 
            show_alert=True
        )

    else:
        address = property_data[0]

        keyboard = keyboard_obj()

        if confirmed:
            conn = await connect()
            try:
                stmt = "DELETE FROM properties WHERE id = $1"
                await conn.execute(stmt, property_id)
            finally:
                await conn.close()

            keyboard.add(button_obj(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start_func-start'))

            bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *‚úÖ –û–±—ä–µ–∫—Ç {address} —É–¥–∞–ª—ë–Ω!*
                    '''
                ),
                parse_mode="Markdown",
                reply_markup=keyboard,
            )     

        else:
            keyboard.row(
                button_obj(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='start_func-back'),
                button_obj(
                    text='‚úÖ –£–¥–∞–ª–∏—Ç—å', 
                    callback_data=f'start_func-removeProperty-property_id={property_id}&confirmed=True'
                )
            )

            bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *üóë –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –æ–±—ä–µ–∫—Ç?*

                    üè† –û–±—ä–µ–∫—Ç: *{address}*
                    '''
                ),
                parse_mode="Markdown",
                reply_markup=keyboard,
            )

# /. === Properties ===


# === Workers ===

@exceptions_catcher()
@autoSetState()
async def workersMenu(user_id: int, worker_data_key: str=None) -> None:
    if worker_data_key:
        redis = (await getRedisConnection())
        redis.delete(worker_data_key)

    keyboard = keyboard_obj()
    keyboard.add(button_obj(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', callback_data='start_func-addWorker'))
    keyboard.add(button_obj(text='üóÇ –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', callback_data='start_func-workersList'))
    keyboard.add(button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back'))

    conn = await connect()
    try:
        workers_query = '''SELECT COUNT(id) FROM "userWorkers" WHERE "userID" = $1'''
        active_workers_query = '''SELECT COUNT(id) FROM "userWorkers" WHERE "userID" = $1 AND "isActive" IS TRUE'''

        workers = (await conn.fetchrow(workers_query, user_id))[0]
        active_workers = (await conn.fetchrow(active_workers_query, user_id))[0]
    finally:
        await conn.close()

    bot.send_message(
        chat_id=user_id,
        text=dedent(
            f'''
            *üßëüèº‚Äçüîß –ú–æ–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏*

            ü¶∫ –í—Å–µ–≥–æ *{workers}* —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∏–∑ –Ω–∏—Ö *{active_workers}* –∞–∫—Ç–∏–≤–Ω—ã—Ö.
            '''
        ),
        parse_mode="Markdown",
        reply_markup=keyboard,
    )

@exceptions_catcher()
@autoSetState()
async def addWorker(user_id: int, work_id: int=None) -> None:
    keyboard = keyboard_obj()
    back_button = button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back')

    if work_id is None:
        keyboard.add(button_obj(text='üß¥ –ö–ª–∏–Ω–∏–Ω–≥', callback_data='start_func-addWorker-work_id=1'))
        keyboard.add(back_button)

        bot.send_message(
            chat_id=user_id,
            text=dedent(
                f'''
                *‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞*

                üîß –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—Ö–æ–¥–∏—Ç—å –≤ –æ–±—è–∑–∞–Ω–æ—Å—Ç–∏ –í–∞—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
                '''
            ),
            parse_mode="Markdown",
            reply_markup=keyboard,
        )

    else:
        keyboard.add(back_button)

        message = bot.send_message(
            chat_id=user_id,
            text=dedent(
                f'''
                *‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞*

                üßëüèº‚Äçüîß –í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç–µ —Å–≤–æ–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.

                _–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –æ—Ç –∏–º–µ–Ω–∏. 
                (–ü—Ä–∏–º–µ—Ä: –ü–∞–≤–µ–ª, +79008007060)._
                '''
            ),
            parse_mode="Markdown",
            reply_markup=keyboard,
        )

        def nextStepHandler(message):
            asyncio.run(confirmWorkerData(message))
        bot.register_next_step_handler(message, nextStepHandler)


    async def confirmWorkerData(message):
        message_parts = message.text.split(',')
        name = message_parts[0]
        if len(message_parts) > 1:
            number = message_parts[1]
        else:
            number = None

        if (len(name) > 36) or (number != None and len(number) > 20):
            keyboard = keyboard_obj()
            keyboard.add(button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back'))

            bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –∏–ª–∏ –Ω–æ–º–µ—Ä!*

                    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ - *36 —Å–∏–º–≤–æ–ª–æ–≤*, –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - *20*.
                    '''
                ),
                parse_mode="Markdown",
                reply_markup=keyboard,
            )

        else:
            worker_data = json.dumps({
                'work_id': work_id,
                'name': name,
                'number': number,
            })
            worker_data_key = str(uuid.uuid4())[:8]
            redis = await getRedisConnection()
            redis.set(worker_data_key, worker_data, ex=60*10)

            keyboard = keyboard_obj()
            keyboard.row(
                button_obj(
                    text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                    callback_data=f'start_func-createWorkerAddLink-worker_data_key="{worker_data_key}"'
                ),
                button_obj(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'start_func-workersMenu-worker_data_key="{worker_data_key}"')
            )
            keyboard.add(back_button)

            bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞*

                    –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –í–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ. –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"*

                    *ü™™ –ò–º—è*: {name}
                    *‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*: {number if number else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
                    *‚öí  –í–∏–¥ —Ä–∞–±–æ—Ç*: {getWorkTitle(work_id, add_emoji=True)}
                    '''
                ),
                parse_mode="Markdown",
                reply_markup=keyboard,
            )

@exceptions_catcher()
async def createWorkerAddLink(user_id: int, worker_data_key: str) -> None:
    redis = await getRedisConnection()
    worker_data = json.loads(redis.get(worker_data_key))
    redis.delete(worker_data_key)

    worker_add_id = str(uuid.uuid4())
    worker_activation_link = f'https://t.me/RentalerWorkBot?start={worker_add_id}'

    conn = await connect()
    try:
        stmt = '''
            INSERT INTO "userWorkers" ("userID", "workID", "workerName", "workerNumber", "addDate", "addID")
            VALUES ($1, $2, $3, $4, $5, $6)
            RETURNING id
        '''
        worker_id = (await conn.fetchval(
                        stmt, 
                        user_id, 
                        worker_data['work_id'], 
                        worker_data['name'],
                        worker_data['number'],
                        datetime.datetime.now(),
                        worker_add_id
                    ))
    finally:
        await conn.close()

    keyboard = keyboard_obj()
    keyboard.add(
        button_obj(
            text='üßëüèº‚Äçüîß –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', 
            callback_data=f'start_func-workerCard-worker_id={worker_id}-call_id=True'
        )
    )

    bot.send_message(
        chat_id=user_id,
        text=dedent(
            f'''
            *üì• –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É*

            –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–≤–æ–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–∏–∂–µ —Å—Å—ã–ª–∫—É. 
            –û–Ω –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –Ω–µ–π –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ _RentalerWork_, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ
            –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∏ –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –µ–º—É –∑–∞–¥–∞—á–∏.

            *üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:* `{worker_activation_link}`
            '''
        ),
        parse_mode="Markdown",
        reply_markup=keyboard,
    )     

@exceptions_catcher()
@autoSetState()
async def workersList(user_id: int, page: int=1) -> None:
    conn = await connect()
    try:
        query = '''
            SELECT id, "workerName", "workID", "isActive"
            FROM "userWorkers"
            WHERE "userID" = $1
        '''
        workers = (await conn.fetch(query, user_id))
    finally:
        await conn.close()

    workers_count = len(workers)
    if workers_count > 0:
        active_workers_count = len([w for w in workers if w[3]]) # w[3] == "isActive" column

        work_workers_count = collections.Counter(w[2] for w in workers)
        workers_by_works_text = '\n'.join(
            f'*{getWorkTitle(k, add_emoji=True)}:* {v} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
            for (k,v) in work_workers_count.items()
        )

        message_text = f'''
            *üóÇ –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤*

            üßëüèº‚Äçüîß –í—Å–µ–≥–æ *{workers_count}* —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∏–∑ –Ω–∏—Ö *{active_workers_count}* –∞–∫—Ç–∏–≤–Ω—ã—Ö.

            {workers_by_works_text}

            üü¢ - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω
            üî¥ - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
        '''

        is_active_emoji = {
            True: 'üü¢',
            False: 'üî¥',
        }
        workers_data = tuple([
            {
                'text': f'{is_active_emoji[w[2]]} {w[1][:10]} ({getWorkTitle(w[2], add_emoji=True)})', 
                'callback_data': f'start_func-workerCard-worker_id={w[0]}-call_id=True'
            } 
            for w in workers
        ])
        keyboard = (await paginator(array=workers_data, current_page=page))
    else:
        message_text = f'''
            *üóÇ –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤*

            –£ –í–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
        '''
        keyboard = keyboard_obj()

    keyboard.add(button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back'))
    
    bot.send_message(
        chat_id=user_id,
        text=dedent(message_text),
        parse_mode="Markdown",
        reply_markup=keyboard,
    )     

@exceptions_catcher()
@autoSetState()
async def workerCard(user_id: int, worker_id: int, call_id: int) -> None:
    conn = await connect()
    try:
        query = '''
            SELECT id, "workID", "workerName", "workerNumber", "addDate", "isActive"
            FROM "userWorkers"
            WHERE "workerID" = $1 AND "userID" = $2
        '''
        worker = (await conn.fetchrow(query, worker_id, user_id))
    finally:
        await conn.close()

    if worker is None:
        bot.answer_callback_query(
            callback_query_id=call_id, 
            text=dedent(
            '''
            üîé –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!

            –ú–µ–Ω—é –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å —É—Å—Ç–∞—Ä–µ–ª–æ.
            '''), 
            show_alert=True
        )

    else:
        work_id = worker[1]
        name = worker[2]
        phone = worker[3]
        add_date = worker[4].date()
        is_active = worker[5]

        is_active_emoji = {
            True: 'üü¢',
            False: 'üî¥',
        }

        keyboard = keyboard_obj()
        keyboard.add(
            button_obj(
                text='üóë –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', 
                callback_data=f'start_func-removeUserWorker-worker_id={worker_id}-call_id=True'
            )
        )
        keyboard.add(button_obj(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start_func-back'))

        bot.send_message(
            chat_id=user_id,
            text=dedent(
                f'''
                *{is_active_emoji[is_active]} {name}*

                ‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {f'`{phone}`' if phone else '*–Ω–µ —É–∫–∞–∑–∞–Ω*'}
                üîß –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: *{getWorkTitle(work_id, add_emoji=True)}*
                üìÖ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: *{add_date}*
                '''
            ),
            parse_mode="Markdown",
            reply_markup=keyboard,
        )     
        
@exceptions_catcher()
async def removeUserWorker(user_id: int, worker_id: int, call_id: int=None, confirmed: bool=False) -> None:
    conn = await connect()
    try:
        query = '''
            SELECT "workID", "workerName"
            FROM "userWorkers"
            WHERE id = $1 AND "userID" = $2
        '''
        worker = (await conn.fetchrow(query, worker_id, user_id))
    finally:
        await conn.close()

    if worker is None:
        bot.answer_callback_query(
            call_id, 
            dedent(
            '''
            üîé –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!

            –ú–µ–Ω—é –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –ø—ã—Ç–∞–ª–∏—Å—å –µ–≥–æ —É–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–ª–æ.
            '''), 
            show_alert=True
        )

    else:
        work_id = worker[0]
        name = worker[1]

        keyboard = keyboard_obj()

        if confirmed:
            conn = await connect()
            try:
                stmt = '''
                    DELETE FROM "userWorkers"
                    WHERE id = $1
                '''
                await conn.execute(stmt, worker_id)
            finally:
                await conn.close()

            keyboard.add(button_obj(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start_func-start'))

            bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} —É–¥–∞–ª—ë–Ω!*
                    '''
                ),
                parse_mode="Markdown",
                reply_markup=keyboard,
            )     

        else:
            keyboard.row(
                button_obj(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='start_func-back'),
                button_obj(
                    text='‚úÖ –£–¥–∞–ª–∏—Ç—å', 
                    callback_data=f'start_func-removeUserWorker-worker_id={worker_id}&confirmed=True'
                )
            )

            bot.send_message(
                chat_id=user_id,
                text=dedent(
                    f'''
                    *üóë –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?*

                    üßëüèº‚Äçüîß –°–æ—Ç—Ä—É–¥–Ω–∏–∫: *({getWorkTitle(work_id, add_emoji=True)}) {name}*
                    '''
                ),
                parse_mode="Markdown",
                reply_markup=keyboard,
            )     

# /. === Workers ===


# Geeter of calendar callback queries
@bot.callback_query_handler(
    func=lambda call: call.data.startswith(calendar_callback.prefix)
)
def calendarCallbackHander(call: telebot.types.CallbackQuery):
    asyncio.run(calendarDataHandler(call))

async def calendarDataHandler(call: telebot.types.CallbackQuery):
    "Process calendars callbacks"

    calendar_data = call.data.split(calendar_callback.sep)
    name, action, year, month, day, start_func, redis_data_key = calendar_data

    date = calendar.calendar_query_handler(
        bot=bot, call=call, name=name, action=action, year=year, month=month, day=day, start_func=start_func, redis_data_key=redis_data_key
    )

    if action == "DAY":
        user_id = call.from_user.id

        redis = (await getRedisConnection())
        if redis.exists(redis_data_key):
            values_dict = json.loads(redis.get(redis_data_key))
        else:
            values_dict = dict()
        values_dict['date'] = f'{year}-{month}-{day}'
        redis.set(redis_data_key, json.dumps(values_dict), ex=60*10)

        await eval(f'{start_func}(user_id={user_id}, redis_data_key="{redis_data_key}")')

    elif action == "CANCEL":
        call.data = 'start_func-back'
        await statesRunner(call)


# Getter of any callback queries in the chat
@bot.callback_query_handler(lambda call: True)
def callbackHandler(call: telebot.types.CallbackQuery):
    asyncio.run(statesRunner(call))

@exceptions_catcher()
async def statesRunner(call: telebot.types.CallbackQuery):
    "Runs required states."

    user_id = call.from_user.id
    data = call.data.split('-') # 0 - command; 1 - command args; 2 - kwargs; 3: - parameters
    command = data[0]

    if command == 'start_func':
        # List which have all the functions from the __main__ module
        functions_list = [
            name for (name, obj) 
                in vars(sys.modules['__main__']).items() 
                if hasattr(obj, "__class__") 
                    and obj.__class__.__name__ == "function"
        ]

        func = data[1]
        if 'back' != func not in functions_list:
            raise NotFound

        elif func == 'back': 
            "Runs previous user state."

            # Clear available next step handlers
            bot.clear_step_handler_by_chat_id(chat_id=user_id)

            current_state = (await getState(bot='main', user_id=user_id))
            if current_state:
                last_state = current_state['last_state']
                last_state['is_back'] = True
            else:
                last_state = None

            if last_state is None:
                await start(user_id=user_id)

            func = last_state['func']
            args = last_state['args']
            kwargs = [
                f'{k}={v}' if isinstance(v, int) else f'{k}="{v}"'
                for k,v in last_state['kwargs'].items()
            ]

            if len(set(('user_id', 'message', 'call')) & set(last_state['kwargs'].keys())) == 0 \
                and len(args) == 0:
                    kwargs.insert(0, f'user_id={user_id}')

            # Setting the past state as the current one 
            await setState('main', user_id, last_state)

        else:
            "Runs required function with kwargs."

            if len(data) > 2 and data[2] != '':
                args = []
                kwargs = data[2].split('&')
                kwargs.insert(0, f'user_id={user_id}')
            else:
                args, kwargs = [], []
                kwargs.insert(0, f'user_id={user_id}')
            
            if len(data) > 3:
                parameters = data[3].split('&')
                if 'user_id=None' in parameters:
                    del kwargs[0] # Remove user_id from kwargs
                if 'call_id=True':
                    kwargs.append(f'call_id=call.id')


        # Deleting a bot message from a previous state
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except telebot.apihelper.ApiTelegramException:
            pass
    
        func_arguments = [*args, *kwargs]
        func_arguments_string = ', '.join(func_arguments)
        await eval(f"{func}({func_arguments_string})")

    elif command == 'set_redis_data':
        "Adds value to redis by key from callback"

        key = data[1]
        kwargs = data[2].split('&')

        redis = (await getRedisConnection())
        if redis.exists(key):
            values_dict = json.loads(redis.get(key))
        else:
            values_dict = dict()

        for kw in kwargs:
            k = kw.split('=')[0]
            v = kw.split('=')[1]
            values_dict[k] = v

        redis.set(key, json.dumps(values_dict), ex=60*10)

        if len(data) > 3:
            parameters = data[3].split('&')
            for p in parameters:
                p_key = p.split('=')[0]
                p_value = p.split('=')[1]

                if p_key == 'start_func':
                    # Deleting a bot message from a previous state
                    try:
                        bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
                    except telebot.apihelper.ApiTelegramException:
                        pass

                    await eval(f'{p_value}(user_id={user_id}, redis_data_key="{key}")')



if __name__ == '__main__':
    while True: 
        try:    
            bot.polling(none_stop=True)
        except Exception as e:
            asyncio.run(addLog(level='critical', text=traceback.format_exc(), send_telegram_message=True))
        asyncio.run(asyncio.sleep(1))