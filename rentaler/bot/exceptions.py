from .logs import addLog
from .tg_api.queries import telegram_api_request

import asyncio
import traceback
import functools
from textwrap import dedent


def exceptions_catcher(func): 
    '''Catches all the exceptions in functions.
    If exception is noticed, it adds a new note to a logfile 
    and sends a telegram message for user about unsuccessful request.
    
    :param func: a function in which exceptions must be catched.
    '''

    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            user_id = args[0].from_user.id
        except (IndexError, AttributeError):
            user_id = None

        try:
            result = await func(*args, *kwargs)
        except Exception as e:
            await addLog(
                level='error', 
                text=traceback.format_exc(),
                send_telegram_message=True,
            )

            if user_id:
                await telegram_api_request(
                    request_method='POST',
                    api_method='sendMessage',
                    bot='main',
                    parameters={
                        'chat_id': user_id,
                        'text': dedent(
                            f'''
                            *‚ùå –í–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –í–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.*

                            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —É–∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –ª–∏—Ü–∞–º.
                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è - –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.

                            *üôè –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–µ–Ω–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.*
                        '''),
                        'parse_mode': 'Markdown',
                    },
                )
    return wrapper